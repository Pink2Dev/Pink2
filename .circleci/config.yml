---
version: 2
jobs:
  build:
    working_directory: /Pink2
    docker:
      - image: ubuntu:bionic
        environment:
          FROM_BUILD: "Pink2"
          HOST: "x86_64-linux-gnu"
          HOST_CFLAGS: "-O2 -pipe"
          HOST_CXXFLAGS: "-O2 -pipe"
          DEPS_PREFIX: "/opt/x86_64-linux-gnu"
    steps:
      - checkout
      - run:
          name: Install toolset
          command: |
                echo APT::Install-Recommends "0"; >> /etc/apt/apt.conf &&
                echo APT::Install-Suggests "0"; >> /etc/apt/apt.conf &&
                apt-get update
                apt-get install -y \
                    --no-install-recommends \
                    autoconf \
                    build-essential \
                    git \
                    qt5-default \
                    qt5-qmake \
                    qtbase5-dev-tools \
                    qttools5-dev-tools \
                    libqt5svg5-dev \
                    pkg-config \
                    wget \
                    ca-certificates
                    mkdir -p $DEPS_PREFIX
      - run:
          name: Build - zlib-1.2.11 [static]
          command: |
                pkg=zlib
                pkg_version=1.2.11
                pkg_dl_path=https://www.zlib.net
                pkg_file_name=$pkg-$pkg_version.tar.gz
                pkg_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1
                pkg_cflags="$HOST_CFLAGS -fPIC"
                pkg_cxxflags="$pkg_cflags"
                pkg_cppflags="-fPIC"
                
                cd src
                wget "$pkg_dl_path/$pkg_file_name"
                echo "$pkg_sha256_hash $pkg_file_name" | sha256sum -c
                tar xfz $pkg_file_name
                 
                cd $pkg-$pkg_version
                CFLAGS=$pkg_cflags \
                CXXFLAGS=$pkg_cflags \
                CPPFLAGS=$pkg_cppflags \
                ./configure \
                    --prefix=$DEPS_PREFIX \
                    --static
                make libz.a
                make install
      - run:
          name: Build - boost-1.75.0 [static]
          command: |
                pkg=boost
                pkg_version=1_75_0
                pkg_dl_path=https://dl.bintray.com/boostorg/release/1.75.0/source
                pkg_file_name=$pkg"_"$pkg_version.tar.bz2
                pkg_sha256_hash=953db31e016db7bb207f11432bef7df100516eeb746843fa0486a222e3fd49cb
                pkg_deps=zlib
                pkg_cflags="$HOST_CFLAGS -I$DEPS_PREFIX/include"
                pkg_cxxflags="$pkg_cflags -std=c++11 -fvisibility=hidden"
                pkg_cxxflags_linux="$pkg_cflags -fPIC"
                pkg_ldflags="-L$DEPS_PREFIX/lib"
                pkg_config_libraries="chrono,filesystem,program_options,system,thread,test,iostreams"
                pkg_config_opts="variant=release --layout=tagged --build-type=complete threading=multi link=static -sNO_COMPRESSION=1"
                pkg_config_opts_mingw32="target-os=windows binary-format=pe threadapi=win32 runtime-link=static"
                pkg_config_opts_linux="target-os=linux threadapi=pthread runtime-link=shared"
                pkg_config_opts_darwin="target-os=darwin runtime-link=shared"
                pkg_config_opts_x86_64="architecture=x86 address-model=64"
                pkg_config_opts_i686="architecture=x86 address-model=32"
                pkg_config_opts_aarch64="address-model=64"
                pkg_config_opts_armv7a="address-model=32"

                cd src
                wget "$pkg_dl_path/$pkg_file_name"
                echo "$pkg_sha256_hash $pkg_file_name" | sha256sum -c
                tar xfj $pkg_file_name

                cd $pkg"_"$pkg_version
                CFLAGS="$pkg_cflags" \
                CXXFLAGS="$pkg_cxxflags $pkg_cxxflags_linux" \
                CPPFLAGS="$pkg_cppflags" \
                LDFLAGS="$pkg_ldflags" \
                ./bootstrap.sh \
                    --without-icu \
                    --with-libraries="$pkg_config_libraries"

                ./b2 -d2 -j2 -d1 \
                    --prefix=$DEPS_PREFIX \
                    $pkg_config_opts \
                    $pkg_config_opts_linux \
                    $pkg_config_opts_x86_64 \
                    stage
                ./b2 -d0 -j4 \
                    --prefix=$DEPS_PREFIX \
                    $pkg_config_opts \
                    $pkg_config_opts_linux \
                    $pkg_config_opts_x86_64 \
                    install
      - run:
          name: Build - db-4.8.30.NC [static]
          command: |
                pkg=db
                pkg_version=4.8.30.NC
                pkg_dl_path=http://download.oracle.com/berkeley-db
                pkg_file_name=$pkg-$pkg_version.tar.gz
                pkg_sha256_hash=12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef
                pkg_cflags="$HOST_CFLAGS"
                pkg_cxxflags="$pkg_cflags"

                cd src
                wget "$pkg_dl_path/$pkg_file_name"
                echo "$pkg_sha256_hash $pkg_file_name" | sha256sum -c
                tar xfz $pkg_file_name

                cd $pkg-$pkg_version
                sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h && \
                sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c && \
                
                cd build_unix/
                CFLAGS=$pkg_cflags \
                CXXFLAGS=$pkg_cxxflags \
                ../dist/configure \
                    --prefix=$DEPS_PREFIX \
                    --enable-cxx \
                    --disable-replication \
                    --disable-shared \
                    --with-pic
                make install
      - run:
          name: Build - miniupnpc-2.0.20180203 [static]
          command: |
                pkg=miniupnpc
                pkg_version=2.0.20180203
                pkg_dl_path=http://miniupnp.free.fr/files
                pkg_file_name=$pkg-$pkg_version.tar.gz
                pkg_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7
                pkg_cflags="$HOST_CFLAGS"
                pkg_cxxflags="$pkg_cflags"

                cd src
                wget "$pkg_dl_path/$pkg_file_name"
                echo "$pkg_sha256_hash $pkg_file_name" | sha256sum -c
                tar xfz $pkg_file_name

                cd $pkg-$pkg_version
                sed -e "s|MINIUPNPC_VERSION_STRING \"version\"|MINIUPNPC_VERSION_STRING \"$pkg_version\"|" -e "s|OS/version|$HOST|" miniupnpcstrings.h.in > miniupnpcstrings.h miniupnpcstrings.h.in > miniupnpcstrings.h
                sed -i.old "s|miniupnpcstrings.h: miniupnpcstrings.h.in wingenminiupnpcstrings|miniupnpcstrings.h: miniupnpcstrings.h.in|" Makefile.mingw

                CFLAGS=$pkg_cflags \
                CXXFLAGS=$pkg_cxxflags \
                make libminiupnpc.a
                mkdir -p $DEPS_PREFIX/include/$pkg
                install *.h $DEPS_PREFIX/include/miniupnpc
                install libminiupnpc.a $DEPS_PREFIX/lib
      - run:
          name: Build - openssl-1.1.1k [static]
          command: |
                pkg=openssl
                pkg_version=1.1.1k
                pkg_dl_path=https://www.openssl.org/source
                pkg_file_name=$pkg-$pkg_version.tar.gz
                pkg_sha256_hash=892a0875b9872acd04a9fde79b1f943075d5ea162415de3047c327df33fbaee5
                pkg_cflags="$HOST_CFLAGS"
                pkg_cxxflags="$pkg_cflags"

                cd src
                wget "$pkg_dl_path/$pkg_file_name"
                echo "$pkg_sha256_hash $pkg_file_name" | sha256sum -c
                tar xfz $pkg_file_name

                cd $pkg-$pkg_version
                CFLAGS=$pkg_cflags \
                CXXFLAGS=$pkg_cxxflags \
                ./Configure \
                    --prefix=$DEPS_PREFIX \
                    linux-x86_64 \
                    no-camellia \
                    no-capieng \
                    no-cast \
                    no-comp \
                    no-dso \
                    no-dtls1 \
                    no-gost \
                    no-heartbeats \
                    no-idea \
                    no-md2 \
                    no-mdc2 \
                    no-rc4 \
                    no-rc5 \
                    no-rdrand \
                    no-rfc3779 \
                    no-sctp \
                    no-seed \
                    no-shared \
                    no-ssl-trace \
                    no-ssl3 \
                    no-unit-test \
                    no-weak-ssl-ciphers \
                    no-whirlpool \
                    no-zlib \
                    no-zlib-dynamic
                make depend
                make install
      - run:
          name: Build - Pinkcoin daemon (pink2d) [static]
          command: |
                pkg=pink2d
                pkg_cflags="$HOST_CFLAGS -I$DEPS_PREFIX/include"
                pkg_cxxflags=$pkg_cflags
                pkg_ldflags="-L$DEPS_PREFIX/lib"
                cd src
                CFLAGS=$pkg_cflags \
                CXXFLAGS=$pkg_cxxflags \
                LDFLAGS=$pkg_ldflags \
                BOOST_LIB_SUFFIX=-mt-x64 \
                make -j 2 -f makefile.unix STATIC=1 USE_UPNP=0
                strip pink2d
      - run:
          name: Build - qrencode-4.1.1 [static]
          command: |
                pkg=qrencode
                pkg_version=4.1.1
                pkg_dl_path=https://fukuchi.org/works/qrencode
                pkg_file_name=$pkg-$pkg_version.tar.bz2
                pkg_sha256_hash=e455d9732f8041cf5b9c388e345a641fd15707860f928e94507b1961256a6923
                pkg_cflags="$HOST_CFLAGS"
                pkg_cxxflags="$pkg_cflags"

                cd src
                wget "$pkg_dl_path/$pkg_file_name"
                echo "$pkg_sha256_hash $pkg_file_name" | sha256sum -c
                tar xfj $pkg_file_name

                cd $pkg-$pkg_version
                ./configure \
                    --host=$HOST \
                    --prefix=$DEPS_PREFIX \
                    --disable-sdltest \
                    --disable-shared \
                    --enable-static \
                    --with-pic \
                    --without-tools
                make install
      - run:
          name: Build - Pinkcoin Qt (pinkcoin-qt)
          command: |
                pkg=pinkcoin-qt
                pkg_cflags="$HOST_CFLAGS -L$DEPS_PREFIX/include"
                pkg_cxxflags=$pkg_cflags
                pkg_ldflags="-L$DEPS_PREFIX/lib"
                CFLAGS=$pkg_cflags \
                CXXFLAGS=$pkg_cxxflags \
                LDFLAGS=$pkg_ldflags \
                qmake \
                    USE_UPNP=0 \
                    USE_DBUS=1 \
                    CONFIG+=c++11 \
                    USE_QRCODE=1 \
                    RELEASE=1 \
                    BOOST_LIB_SUFFIX=-mt-x64 \
                    BDB_LIB_PATH=$DEPS_PREFIX/lib \
                    BDB_INCLUDE_PATH=$DEPS_PREFIX/include \
                    OPENSSL_INCLUDE_PATH=$DEPS_PREFIX/include \
                    OPENSSL_LIB_PATH=$DEPS_PREFIX/lib \
                    QRENCODE_LIB_PATH=$DEPS_PREFIX/lib \
                    QRENCODE_INCLUDE_PATH=$DEPS_PREFIX/include
                make -j 2
                strip Pinkcoin-Qt
      - run:
          name: Set Artifact name as env
          command: |
                echo 'export GIT_COMMIT_ID=$(git rev-parse --short=9 HEAD 2>/dev/null)' >> $BASH_ENV
                echo 'export BUILD_DATE=$(date "+%Y%m%d%H%M")' >> $BASH_ENV
                echo 'export BUILD_NAME=pinkcoin-$GIT_COMMIT_ID-$HOST-cibuild-$CIRCLE_BUILD_NUM-$BUILD_DATE' >> $BASH_ENV
                echo 'export STAGING_DIR=/tmp/build/$BUILD_NAME' >> $BASH_ENV
      - run:
          name: Stage artifacts
          command: |
                mkdir -p $STAGING_DIR/bin
                cp src/pink2d $STAGING_DIR/bin
                cp Pinkcoin-Qt $STAGING_DIR/bin
                cd /tmp/build
                tar cvfJ $BUILD_NAME.tar.xz $BUILD_NAME
                sha256sum $BUILD_NAME.tar.xz >> $BUILD_NAME.tar.xz.sha256
      - store_artifacts:
          path: /tmp/build/
destination: linux
