steps:
- bash: |
    $(linux.qt.prefix)/bin/qmake \
    USE_UPNP=1 USE_DBUS=1 CONFIG+=c++11 \
    USE_QRCODE=1 STATIC=1 RELEASE=1 \
    BDB_LIB_PATH=$(linux.bdb.prefix)/lib \
    BDB_INCLUDE_PATH=$(linux.bdb.prefix)/include \
    OPENSSL_INCLUDE_PATH=$(linux.openssl.prefix)/include \
    OPENSSL_LIB_PATH=$(linux.openssl.prefix)/lib \
    QRENCODE_LIB_PATH=$(linux.qrencode.prefix)/lib \
    QRENCODE_INCLUDE_PATH=$(linux.qrencode.prefix)/include \
    QMAKE_LRELEASE=$(linux.qt.prefix)/bin/lrelease
    make -j2
    strip Pinkcoin-Qt
  displayName: 'Build Pinkcoin-Qt'

- bash: |
    cd src
    make -j2 -f makefile.unix STATIC=1 \
    USE_UPNP=1 USE_QRCODE=1 BDB_INCLUDE_PATH=$(linux.bdb.prefix)/include \
    BDB_LIB_PATH=$(linux.bdb.prefix)/lib OPENSSL_LIB_PATH=$(linux.openssl.prefix)/lib \
    OPENSSL_INCLUDE_PATH=$(linux.openssl.prefix)/include
    strip pink2d
  displayName: 'Build headless bin pink2d'

- bash: |
    mkdir publish
    cp Pinkcoin-Qt publish
    cp src/pink2d publish
    tar cvfz $(linux.build.name).tar.gz -C publish .
    cp $(linux.build.name).tar.gz $(Build.ArtifactStagingDirectory)
  displayName: 'Tar Pinkcoin binaries'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Pinkcoin binaries'
  inputs:
    ArtifactName: 'Pinkcoin_binaries'
